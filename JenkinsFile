pipeline {
    agent any

    environment {
        DOCKER_HUB_CREDENTIALS = credentials('dockerhub-credentials-id')
        DOCKER_HUB_REPO = 'gv2002'
        KUBECONFIG = credentials('kubeconfig-credentials-id')
    }

    stages {
        stage('Build Docker Images') {
            steps {
                script {
                    def services = [
                        './Backend/gateway',
                        './Backend/OutputMonitor',
                        './Backend/price_monitor',
                        './Backend/SignUp',
                        './Backend/stock_ingestion',
                        './Backend/user_activity',
                        './Frontend_nw'
                    ]
                    for (service in services) {
                        dir(service) {
                            if (!service.endsWith('Frontend_nw')) {
                                sh 'mvn clean package -DskipTests'
                            }
                            def imageName = "${DOCKER_HUB_REPO}/${service.split('/').last().toLowerCase()}"
                            if (service.endsWith('Frontend_nw')) {
                                sh "docker build -t ${imageName}:latest ."
                            } else {
                                sh "docker build -t ${imageName}:latest ."
                            }
                        }
                    }
                }
            }
        }

        stage('Push Docker Images') {
            steps {
                script {
                    def services = [
                        './Backend/gateway',
                        './Backend/OutputMonitor',
                        './Backend/price_monitor',
                        './Backend/SignUp',
                        './Backend/stock_ingestion',
                        './Backend/user_activity',
                        './Frontend_nw'
                    ]

                    for (service in services) {
                        def imageName = "${DOCKER_HUB_REPO}/${service.split('/').last().toLowerCase()}"
                        sh "echo ${DOCKER_HUB_CREDENTIALS_PSW} | docker login -u ${DOCKER_HUB_CREDENTIALS_USR} --password-stdin"
                        sh "docker push ${imageName}:latest"
                    }
                }
            }
        }

        stage('Deploy MySQL') {
            steps {
                script {
                    sh 'kubectl apply -f mysql-statefulset.yaml'
                    sh 'kubectl rollout status statefulset/mysql --timeout=120s || exit 1'
                    echo "MySQL deployment completed"
                }
            }
        }

        stage('Deploy Fixed IP ConfigMap') {
            steps {
                script {
                    writeFile file: "fixed-ips.yaml", text: '''
apiVersion: v1
kind: ConfigMap
metadata:
  name: service-ips
data:
  gateway-ip: "10.100.0.10"
  outputmonitor-ip: "10.100.0.11"
  price-monitor-ip: "10.100.0.12"
  signup-ip: "10.100.0.13"
  stock-ingestion-ip: "10.100.0.14"
  frontend-ip: "10.100.0.15"
  mysql-ip: "10.100.0.16"
  user-activity-ip: "10.100.0.17"
'''
                    sh "kubectl apply -f fixed-ips.yaml"
                }
            }
        }
        
        stage('Deploy Stock Ingestion') {
            steps {
                script {
                    def service = 'stock_ingestion'
                    def port = 8090
                    def k8sName = service.replaceAll('_', '-').toLowerCase()
                    def serviceType = 'ClusterIP'
                    def servicePort = 80
                    def targetPort = port
                    def ipKey = k8sName + '-ip'
                    def fixedIp = '10.100.0.14' // stock-ingestion-ip
                    
                    def statefulSetYaml = """\
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: ${k8sName}
spec:
  serviceName: "${k8sName}-service"
  replicas: 1
  selector:
    matchLabels:
      app: ${k8sName}
  template:
    metadata:
      labels:
        app: ${k8sName}
    spec:
      containers:
      - name: ${k8sName}
        image: ${DOCKER_HUB_REPO}/${service}:latest
        ports:
        - containerPort: ${port}
---
apiVersion: v1
kind: Service
metadata:
  name: ${k8sName}-service
spec:
  selector:
    app: ${k8sName}
  ports:
  - protocol: TCP
    port: ${servicePort}
    targetPort: ${targetPort}
  type: ${serviceType}
  clusterIP: ${fixedIp}
"""
                    writeFile file: "${k8sName}-statefulset.yaml", text: statefulSetYaml
                    sh "kubectl apply -f ${k8sName}-statefulset.yaml"
                    sh "kubectl rollout status statefulset/${k8sName} --timeout=120s || exit 1"
                    echo "Stock Ingestion deployment completed"
                }
            }
        }

        stage('Deploy Remaining Services') {
            steps {
                script {
                    def servicePorts = [
                        'gateway'        : 8085,
                        'outputmonitor'  : 9000,
                        'price_monitor'  : 8091,
                        'signup'         : 9010,
                        'user_activity'  : 9020,
                        'frontend_nw'    : 5173
                    ]
                    
                    // Hard-code IPs instead of reading from configmap
                    def serviceIps = [
                        'gateway-ip': '10.100.0.10',
                        'outputmonitor-ip': '10.100.0.11',
                        'price-monitor-ip': '10.100.0.12',
                        'signup-ip': '10.100.0.13',
                        'frontend-ip': '10.100.0.15',
                        'user-activity-ip': '10.100.0.17'
                    ]
                    
                    for (service in servicePorts.keySet()) {
                        def port = servicePorts[service]
                        def k8sName = service.replaceAll('_', '-').toLowerCase()
                        def isFrontend = (k8sName == 'frontend-nw')
                        def serviceType = isFrontend ? 'NodePort' : 'ClusterIP'
                        def servicePort = isFrontend ? 30080 : 80
                        def targetPort = isFrontend ? 80 : port
                        
                        // Determine the fixed IP based on service name
                        def ipKey = k8sName.replaceAll('-nw', '') + '-ip'
                        def fixedIp = serviceIps[ipKey]
                        
                        def statefulSetYaml = """\
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: ${k8sName}
spec:
  serviceName: "${k8sName}-service"
  replicas: 1
  selector:
    matchLabels:
      app: ${k8sName}
  template:
    metadata:
      labels:
        app: ${k8sName}
    spec:
      containers:
      - name: ${k8sName}
        image: ${DOCKER_HUB_REPO}/${service}:latest
        ports:
        - containerPort: ${port}
---
apiVersion: v1
kind: Service
metadata:
  name: ${k8sName}-service
spec:
  selector:
    app: ${k8sName}
  ports:
  - protocol: TCP
    port: ${servicePort}
    targetPort: ${targetPort}
  type: ${serviceType}
  clusterIP: ${fixedIp}
"""
                        writeFile file: "${k8sName}-statefulset.yaml", text: statefulSetYaml
                        sh "kubectl apply -f ${k8sName}-statefulset.yaml"
                    }
                }
            }
        }

        stage('Deploy Monitoring Stack') {
            steps {
                script {
                    // Update ConfigMap to add monitoring IPs
                    writeFile file: "fixed-ips-monitoring.yaml", text: '''
apiVersion: v1
kind: ConfigMap
metadata:
  name: service-ips
data:
  gateway-ip: "10.100.0.10"
  outputmonitor-ip: "10.100.0.11"
  price-monitor-ip: "10.100.0.12"
  signup-ip: "10.100.0.13"
  stock-ingestion-ip: "10.100.0.14"
  frontend-ip: "10.100.0.15"
  mysql-ip: "10.100.0.16"
  user-activity-ip: "10.100.0.17"
  prometheus-ip: "10.100.0.20"
  grafana-ip: "10.100.0.21"
  loki-ip: "10.100.0.22"
'''
                    sh "kubectl apply -f fixed-ips-monitoring.yaml"
                    
                    // Prometheus ConfigMap
                    def prometheusConfigYaml = '''
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
data:
  prometheus.yml: |
    global:
      scrape_interval: 15s
    scrape_configs:
      # Spring Boot microservices
      - job_name: 'spring-boot'
        metrics_path: '/actuator/prometheus'
        kubernetes_sd_configs:
          - role: endpoints
        relabel_configs:
          - source_labels: [__meta_kubernetes_service_name]
            action: keep
            regex: .*-service
          - source_labels: [__meta_kubernetes_service_name]
            action: replace
            target_label: app
            regex: (.*)-service
            replacement: $1
      
      # Prometheus itself
      - job_name: 'prometheus'
        static_configs:
          - targets: ['localhost:9090']
      
      # Kubernetes nodes
      - job_name: 'kubernetes-nodes'
        kubernetes_sd_configs:
          - role: node
        relabel_configs:
          - action: labelmap
            regex: __meta_kubernetes_node_label_(.+)
'''
                    
                    // Create Prometheus deployment
                    def prometheusDeploymentYaml = '''
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
  labels:
    app: prometheus
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      labels:
        app: prometheus
    spec:
      containers:
      - name: prometheus
        image: prom/prometheus:latest
        args:
        - "--config.file=/etc/prometheus/prometheus.yml"
        - "--storage.tsdb.path=/prometheus"
        - "--web.console.libraries=/usr/share/prometheus/console_libraries"
        - "--web.console.templates=/usr/share/prometheus/consoles"
        ports:
        - containerPort: 9090
        volumeMounts:
        - name: prometheus-config-volume
          mountPath: /etc/prometheus/
        - name: prometheus-storage-volume
          mountPath: /prometheus
      volumes:
      - name: prometheus-config-volume
        configMap:
          defaultMode: 420
          name: prometheus-config
      - name: prometheus-storage-volume
        emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: prometheus-service
spec:
  selector:
    app: prometheus
  type: NodePort
  ports:
  - port: 9090
    targetPort: 9090
    nodePort: 30090
  clusterIP: "10.100.0.20"
'''

                    // Grafana datasources ConfigMap
                    def grafanaDatasourcesYaml = '''
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-datasources
data:
  datasources.yaml: |
    apiVersion: 1
    datasources:
    - name: Prometheus
      type: prometheus
      url: http://prometheus-service:9090
      access: proxy
      isDefault: true
    - name: Loki
      type: loki
      url: http://loki-service:3100
      access: proxy
'''

                    // Create Grafana deployment
                    def grafanaDeploymentYaml = '''
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  labels:
    app: grafana
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      containers:
      - name: grafana
        image: grafana/grafana:latest
        ports:
        - containerPort: 3000
        env:
        - name: GF_SECURITY_ADMIN_USER
          value: "admin"
        - name: GF_SECURITY_ADMIN_PASSWORD
          value: "admin"
        volumeMounts:
        - name: grafana-datasources
          mountPath: /etc/grafana/provisioning/datasources
      volumes:
      - name: grafana-datasources
        configMap:
          name: grafana-datasources
---
apiVersion: v1
kind: Service
metadata:
  name: grafana-service
spec:
  selector:
    app: grafana
  type: NodePort
  ports:
  - port: 3000
    targetPort: 3000
    nodePort: 30300
  clusterIP: "10.100.0.21"
'''

                    // Loki ConfigMap
                    def lokiConfigYaml = '''
apiVersion: v1
kind: ConfigMap
metadata:
  name: loki-config
data:
  loki.yaml: |
    auth_enabled: false
    server:
      http_listen_port: 3100
    schema_config:
      configs:
        - from: 2020-05-15
          store: inmemory
          object_store: filesystem
          schema: v11
          index:
            prefix: index_
            period: 168h
    storage_config:
      filesystem:
        directory: /tmp/loki/chunks
'''

                    // Loki deployment
                    def lokiDeploymentYaml = '''
apiVersion: apps/v1
kind: Deployment
metadata:
  name: loki
  labels:
    app: loki
spec:
  replicas: 1
  selector:
    matchLabels:
      app: loki
  template:
    metadata:
      labels:
        app: loki
    spec:
      containers:
      - name: loki
        image: grafana/loki:2.8.0
        ports:
        - containerPort: 3100
          name: http
        volumeMounts:
        - name: loki-config
          mountPath: /etc/loki
        - name: loki-storage
          mountPath: /tmp/loki
        args:
        - -config.file=/etc/loki/loki.yaml
        - -config.expand-env=true
      volumes:
      - name: loki-config
        configMap:
          name: loki-config
      - name: loki-storage
        emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: loki-service
spec:
  selector:
    app: loki
  type: NodePort
  ports:
  - port: 3100
    targetPort: 3100
    nodePort: 30100
  clusterIP: "10.100.0.22"
'''

                    // Promtail ConfigMap
                    def promtailConfigYaml = '''
apiVersion: v1
kind: ConfigMap
metadata:
  name: promtail-config
data:
  promtail.yaml: |
    server:
      http_listen_port: 9080
      grpc_listen_port: 0
    
    positions:
      filename: /tmp/positions.yaml
    
    clients:
      - url: http://loki-service:3100/loki/api/v1/push
    
    scrape_configs:
      - job_name: kubernetes-pods
        kubernetes_sd_configs:
          - role: pod
        relabel_configs:
          - source_labels:
              - __meta_kubernetes_pod_controller_name
            regex: ([0-9a-z-.]+)(-[0-9a-f]{8,10})?
            action: replace
            target_label: app
        pipeline_stages:
          - docker: {}
'''

                    // Promtail DaemonSet
                    def promtailDaemonSetYaml = '''
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: promtail
spec:
  selector:
    matchLabels:
      app: promtail
  template:
    metadata:
      labels:
        app: promtail
    spec:
      containers:
      - name: promtail
        image: grafana/promtail:latest
        args:
        - -config.file=/etc/promtail/promtail.yaml
        volumeMounts:
        - name: config
          mountPath: /etc/promtail
        - name: containers
          mountPath: /var/lib/docker/containers
          readOnly: true
        - name: pods
          mountPath: /var/log/pods
          readOnly: true
        ports:
        - containerPort: 9080
          name: http-metrics
          protocol: TCP
      volumes:
      - name: config
        configMap:
          name: promtail-config
      - name: containers
        hostPath:
          path: /var/lib/docker/containers
      - name: pods
        hostPath:
          path: /var/log/pods
'''

                    // Apply configs
                    writeFile file: "prometheus-config.yaml", text: prometheusConfigYaml
                    writeFile file: "prometheus-deployment.yaml", text: prometheusDeploymentYaml
                    writeFile file: "grafana-datasources.yaml", text: grafanaDatasourcesYaml
                    writeFile file: "grafana-deployment.yaml", text: grafanaDeploymentYaml
                    writeFile file: "loki-config.yaml", text: lokiConfigYaml
                    writeFile file: "loki-deployment.yaml", text: lokiDeploymentYaml
                    writeFile file: "promtail-config.yaml", text: promtailConfigYaml
                    writeFile file: "promtail-daemonset.yaml", text: promtailDaemonSetYaml
                    
                    // Apply resources
                    sh "kubectl apply -f prometheus-config.yaml"
                    sh "kubectl apply -f prometheus-deployment.yaml"
                    sh "kubectl apply -f grafana-datasources.yaml"
                    sh "kubectl apply -f grafana-deployment.yaml"
                    sh "kubectl apply -f loki-config.yaml"
                    sh "kubectl apply -f loki-deployment.yaml"
                    sh "kubectl apply -f promtail-config.yaml"
                    sh "kubectl apply -f promtail-daemonset.yaml"
                    
                    sh "echo 'Waiting for Prometheus deployment...'"
                    sh "kubectl rollout status deployment/prometheus"
                    sh "echo 'Waiting for Grafana deployment...'"
                    sh "kubectl rollout status deployment/grafana"
                    sh "echo 'Waiting for Loki deployment...'"
                    sh "kubectl rollout status deployment/loki --timeout=60s || true"

                    echo "Monitoring stack deployed successfully"
                    echo "Prometheus available at: http://localhost:30090"
                    echo "Grafana available at: http://localhost:30300 (admin/admin)"
                    echo "Loki available at: http://localhost:30100 (access through Grafana)"
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
    }
}