pipeline {
    agent any

    environment {
        DOCKER_HUB_CREDENTIALS = credentials('dockerhub-credentials-id')
        DOCKER_HUB_REPO = 'gv2002'
        KUBECONFIG = credentials('kubeconfig-credentials-id')
    }

    stages {
        stage('Build Docker Images') {
            steps {
                script {
                    def buildModule = load "jenkins/modules/buildImages.groovy"
                    buildModule.execute(env.DOCKER_HUB_REPO)
                }
            }
        }

        stage('Push and Pull Docker Images') {
            steps {
                script {
                    def pushModule = load "jenkins/modules/pushImages.groovy"
                    pushModule.execute(env.DOCKER_HUB_REPO, env.DOCKER_HUB_CREDENTIALS_USR, env.DOCKER_HUB_CREDENTIALS_PSW)
                }
            }
        }

        stage('Deploy MySQL') {
            steps {
                script {
                    def mysqlModule = load "jenkins/modules/deployMySQL.groovy"
                    mysqlModule.execute()
                }
            }
        }

        stage('Deploy Fixed IP ConfigMap') {
            steps {
                script {
                    def configModule = load "jenkins/modules/deployConfig.groovy"
                    configModule.createFixedIps()
                }
            }
        }
        
        stage('Deploy Stock Ingestion') {
            steps {
                script {
                    def stockModule = load "jenkins/modules/deployStockIngestion.groovy"
                    stockModule.execute(env.DOCKER_HUB_REPO)
                }
            }
        }

        stage('Deploy Remaining Services') {
            steps {
                script {
                    def servicesModule = load "jenkins/modules/deployServices.groovy"
                    servicesModule.execute(env.DOCKER_HUB_REPO)
                }
            }
        }

        stage('Deploy Monitoring Stack') {
            steps {
                script {
                    def monitoringModule = load "jenkins/modules/deployMonitoring.groovy"
                    monitoringModule.execute()
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
    }
}