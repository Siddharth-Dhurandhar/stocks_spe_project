pipeline {
    agent any

    environment {
        DOCKER_HUB_CREDENTIALS = credentials('dockerhub-credentials-id')
        DOCKER_HUB_REPO = 'gv2002'
        KUBECONFIG = credentials('kubeconfig-credentials-id')
    }

    stages {
        stage('Build Docker Images') {
            steps {
                script {
                    def services = [
                        './Backend/gateway',
                        './Backend/OutputMonitor',
                        './Backend/price_monitor',
                        './Backend/SignUp',
                        './Backend/stock_ingestion',
                        './Frontend_nw'
                    ]
                    for (service in services) {
                        dir(service) {
                            if (!service.endsWith('Frontend_nw')) {
                                sh 'mvn clean package -DskipTests'
                            }
                            def imageName = "${DOCKER_HUB_REPO}/${service.split('/').last().toLowerCase()}"
                            if (service.endsWith('Frontend_nw')) {
                                sh "docker build -t ${imageName}:latest ."
                            } else {
                                sh "docker build -t ${imageName}:latest ."
                            }
                        }
                    }
                }
            }
        }

        stage('Push Docker Images') {
            steps {
                script {
                    def services = [
                        './Backend/gateway',
                        './Backend/OutputMonitor',
                        './Backend/price_monitor',
                        './Backend/SignUp',
                        './Backend/stock_ingestion',
                        './Frontend_nw'
                    ]

                    for (service in services) {
                        def imageName = "${DOCKER_HUB_REPO}/${service.split('/').last().toLowerCase()}"
                        sh "echo ${DOCKER_HUB_CREDENTIALS_PSW} | docker login -u ${DOCKER_HUB_CREDENTIALS_USR} --password-stdin"
                        sh "docker push ${imageName}:latest"
                    }
                }
            }
        }

        stage('Deploy MySQL') {
            steps {
                script {
                    sh 'kubectl apply -f mysql-statefulset.yaml'
                    sh 'kubectl rollout status statefulset/mysql --timeout=120s || exit 1'
                }
            }
        }

        stage('Deploy Fixed IP ConfigMap') {
            steps {
                script {
                    writeFile file: "fixed-ips.yaml", text: '''
apiVersion: v1
kind: ConfigMap
metadata:
  name: service-ips
data:
  gateway-ip: "10.100.0.10"
  outputmonitor-ip: "10.100.0.11"
  price-monitor-ip: "10.100.0.12"
  signup-ip: "10.100.0.13"
  stock-ingestion-ip: "10.100.0.14"
  frontend-ip: "10.100.0.15"
  mysql-ip: "10.100.0.16"
'''
                    sh "kubectl apply -f fixed-ips.yaml"
                }
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                script {
                    def servicePorts = [
                        'gateway'        : 8095,
                        'outputmonitor'  : 9000,
                        'price_monitor'  : 8091,
                        'signup'         : 9010,
                        'stock_ingestion': 8090,
                        'frontend_nw'    : 5173
                    ]
                    
                    for (service in servicePorts.keySet()) {
                        def port = servicePorts[service]
                        def k8sName = service.replaceAll('_', '-').toLowerCase()
                        def isFrontend = (k8sName == 'frontend-nw')
                        def serviceType = isFrontend ? 'NodePort' : 'ClusterIP'
                        def servicePort = isFrontend ? 30080 : 80
                        def targetPort = isFrontend ? 80 : port
                        
                        // Get the fixed IP directly from kubectl
                        def ipKey = k8sName.replaceAll('-nw', '') + '-ip'
                        def fixedIp = sh(
                            script: "kubectl get configmap service-ips -o jsonpath='{.data.${ipKey}}'", 
                            returnStdout: true
                        ).trim()
                        
                        def statefulSetYaml = """\
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: ${k8sName}
spec:
  serviceName: "${k8sName}-service"
  replicas: 1
  selector:
    matchLabels:
      app: ${k8sName}
  template:
    metadata:
      labels:
        app: ${k8sName}
    spec:
      containers:
      - name: ${k8sName}
        image: ${DOCKER_HUB_REPO}/${service}:latest
        ports:
        - containerPort: ${port}
---
apiVersion: v1
kind: Service
metadata:
  name: ${k8sName}-service
spec:
  selector:
    app: ${k8sName}
  ports:
  - protocol: TCP
    port: ${servicePort}
    targetPort: ${targetPort}
  type: ${serviceType}
  clusterIP: ${fixedIp}
"""
                        writeFile file: "${k8sName}-statefulset.yaml", text: statefulSetYaml
                        sh "kubectl apply -f ${k8sName}-statefulset.yaml"
                    }
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
    }
}



